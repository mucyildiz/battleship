{"version":3,"sources":["Ship.js","Player.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Ship","name","length","_createdShip","Array","fill","getName","getLength","hitShip","position","isSunk","every","isPlaced","Player","props","carrier","battleship","destroyer","submarine","patrolBoat","state","gameboard","map","attacked","ship","shipPosition","mock","ships","mockShips","placedShips","gameover","loser","numPlacedShips","this","user","populateCPUGameboard","prevProps","prevState","input","xCoord","mapLetterToNumber","yCoord","Number","vertical","placeMockShip","clearMocks","shipCoords","coordinates","console","log","placeShip","setState","currentState","ready","err","alert","turn","gameOver","row","getRandomInt","col","loop","handleAttack","value","test","letter","isInteger","indexOf","toUpperCase","shipsPlaced","rotation","Math","random","currShip","board","slice","column","rotated","Error","i","isNaN","filter","concat","gameStarted","checkAllShipsSunk","changeTurn","allSunk","endGame","max","floor","id","style","key","className","j","onclick","Component","Cell","onClick","Game","addedShipCoordinates","buttonValue","gameReadyToStart","updateInput","bind","handleInput","newGameStarted","e","preventDefault","stopPropagation","target","newValue","isGameOver","type","startGame","readyToStartGame","onSubmit","onChange","maxLength","toggleOrientation","GameOver","App","playerOne","playerTwo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed2e8127.chunk.js","sourcesContent":["export const Ship = (name, length) => {\r\n    // ship of length 'length' created and initialized with no hits\r\n    let isPlaced = false;\r\n\r\n    const getName = () => {\r\n        return name;\r\n    }\r\n\r\n    const getLength = () => {\r\n        return length;\r\n    }\r\n\r\n    const _createdShip = Array(length).fill(false);\r\n\r\n    const hitShip = (position) => {\r\n        _createdShip[position] = true;\r\n    }\r\n\r\n    const isSunk = () => {\r\n        return _createdShip.every((position) => position);\r\n    }\r\n\r\n    return { getName, getLength, hitShip, isSunk, isPlaced};\r\n\r\n}","// player has properties (gameboard, isPlayerTwo) and state turn, should have \r\nimport React, { Component } from 'react';\r\nimport { Ship } from './Ship';\r\nimport './Gameboard.css'\r\n\r\nexport default class Player extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        const carrier = Ship('Carrier', 5);\r\n        const battleship = Ship('Battleship', 4);\r\n        const destroyer = Ship('Destroyer', 3);\r\n        const submarine = Ship('Submarine', 3);\r\n        const patrolBoat = Ship('Patrol Boat', 2);\r\n\r\n        //player one goes first\r\n        this.state = {\r\n            gameboard: new Array(10).fill(null).map(() =>\r\n            new Array(10).fill(null).map(() =>\r\n            {\r\n                return {attacked: false, ship: null, shipPosition: null, mock: false}\r\n            })),\r\n            ships: [carrier, battleship, destroyer, submarine, patrolBoat],\r\n            mockShips: [carrier, battleship, destroyer, submarine, patrolBoat],\r\n            placedShips: [],\r\n            gameover: false,\r\n            loser: false,\r\n            numPlacedShips: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(!this.props.user) {\r\n            this.populateCPUGameboard();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if(this.props.user){\r\n            if(this.props.input.length === 2){\r\n                let xCoord = this.mapLetterToNumber(this.props.input[0]);\r\n                let yCoord = Number(this.props.input[1]);\r\n                if(prevProps.input !== this.props.input || prevProps.vertical !== this.props.vertical){\r\n                    try{\r\n                    this.placeMockShip(this.state.mockShips[0], xCoord, yCoord, this.props.vertical);\r\n                    }\r\n                    catch{\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                if(prevProps.input !== this.props.input){\r\n                    this.clearMocks();\r\n                }\r\n            }\r\n        }\r\n        //if a ship coordinate has been submitted, add that ship to the user board\r\n        if(this.props.user && prevProps.shipCoords !== this.props.shipCoords){\r\n            //get latest coordinates\r\n            let coordinates = this.props.shipCoords[this.props.shipCoords.length-1];\r\n            console.log(coordinates);\r\n            try{\r\n            this.placeShip(this.state.ships[0], this.mapLetterToNumber(coordinates[0]), coordinates[1], this.props.vertical);\r\n            //made numplaced ships since setstate is async and can't keep track of placedships.length instantaneously\r\n            this.setState((currentState) => {\r\n                return {\r\n                    numPlacedShips: currentState.numPlacedShips + 1,\r\n                }\r\n            }, () => \r\n            //if all ships placed, we can start the game, takes away form to add ships\r\n            {\r\n                if(this.state.numPlacedShips === 5){\r\n                    this.props.ready();\r\n                }\r\n            })\r\n            }\r\n            catch(err){\r\n                alert(err);\r\n            }\r\n        }\r\n\r\n        //if its the user board and its not the user's turn, the CPU moves\r\n        if(this.props.user && prevProps.turn !== this.props.turn && !this.props.turn && !this.props.gameOver){\r\n            let row = this.getRandomInt(10);\r\n            let col = this.getRandomInt(10);\r\n\r\n            //if row,col has already been hit, generate new row and col until we get viable option\r\n            while(this.state.gameboard[row][col].attacked){\r\n                row = this.getRandomInt(10);\r\n                col = this.getRandomInt(10);\r\n            }\r\n\r\n            let loop = true;\r\n            while(loop) {\r\n                try{\r\n                    this.handleAttack(row, col);\r\n                    loop = false;\r\n                }\r\n                catch{};\r\n            }\r\n\r\n        }\r\n    }   \r\n\r\n    isInteger(value) {\r\n        return /^\\d+$/.test(value);\r\n      }\r\n\r\n    mapLetterToNumber(letter) {\r\n        if(this.isInteger(letter)){\r\n            return Number(letter);\r\n        }\r\n        let letters = 'ABCDEFGHIJ';\r\n        return letters.indexOf(letter.toUpperCase());\r\n    }\r\n\r\n    \r\n    populateCPUGameboard() {\r\n        let shipsPlaced = 0;\r\n        while(shipsPlaced < 5){\r\n            try{\r\n                const row = this.getRandomInt(10);\r\n                const col = this.getRandomInt(10);\r\n                const rotation = Math.random() > .5 ? true: false;\r\n                const currShip = this.state.ships[shipsPlaced];\r\n                this.placeShip(currShip, row, col, rotation);\r\n                shipsPlaced++;\r\n            }\r\n            catch{}\r\n        }\r\n    }\r\n\r\n    clearMocks(){\r\n        let board = this.state.gameboard.slice();\r\n        for(let row of board){\r\n            for(let ship of row){\r\n                if(ship.ship && ship.mock){\r\n                    ship.mock = false;\r\n                    ship.ship = null;\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            gameboard: board,\r\n        })\r\n    }\r\n\r\n    placeMockShip(ship, row, column, rotated=false){\r\n        this.clearMocks();\r\n        let board = this.state.gameboard.slice();\r\n        \r\n        // if rotated is false, then the ship is horizontal, if true then the ship is vertical: also checks to see if in bounds\r\n        if (!rotated) {\r\n            // begin at row that ship was placed on \r\n            if(column + ship.getLength() > 10) {\r\n                throw new Error('ship is out of bounds');\r\n            }\r\n\r\n            for (let i=column; i<(column + ship.getLength()); i++) {\r\n                if(board[row][i].ship !== null) {\r\n                    throw new Error('Cannot overlap ships.');\r\n                }\r\n            }\r\n\r\n            for (let i=column; i<(column + ship.getLength()); i++) {\r\n                board[row][i].ship = ship;\r\n                board[row][i].mock=true;\r\n            }\r\n        }\r\n        else if (rotated) {\r\n\r\n            if(row + ship.getLength() > 10) {\r\n                throw new Error('ship is out of bounds');\r\n            }\r\n\r\n            for (let i=row; i<(row + ship.getLength()); i++) {\r\n                if(board[i][column].ship !== null) {\r\n                    throw new Error('Cannot overlap ships.');\r\n                }\r\n            }\r\n\r\n            for (let i=row; i<(row + ship.getLength()); i++) {\r\n                board[i][column].ship = ship;\r\n                board[i][column].mock=true;\r\n            }\r\n        }\r\n        this.setState({\r\n            gameboard: board,\r\n        })\r\n\r\n    }\r\n\r\n    placeShip(ship, row, column, rotated=false) {\r\n        // make a copy so we don't mess with the state\r\n        console.log(row, column);\r\n        if(row < 0 || row > 9 || column < 0 || column > 9 || isNaN(row) || isNaN(column)) {\r\n            throw new Error('invalid coordinates')\r\n        }\r\n        let board = this.state.gameboard.slice();\r\n        let position = 0;\r\n        // if rotated is false, then the ship is horizontal, if true then the ship is vertical: also checks to see if in bounds\r\n        if (!rotated) {\r\n            // begin at row that ship was placed on \r\n            if(column + ship.getLength() > 10) {\r\n                throw new Error('ship is out of bounds');\r\n            }\r\n\r\n\r\n            for (let i=column; i<(column + ship.getLength()); i++) {\r\n                if(board[row][i].ship !== null && !board[row][i].mock) {\r\n                    throw new Error('Cannot overlap ships');\r\n                }\r\n            }\r\n\r\n            for (let i=column; i<(column + ship.getLength()); i++) {\r\n                if(board[row][i].ship !== null && board[row][i].mock){\r\n                    board[row][i].mock = false;\r\n                    board[row][i].ship = null;\r\n                }\r\n                board[row][i].ship = ship;\r\n                board[row][i].shipPosition = position;\r\n                ship.isPlaced = true;\r\n                position++;\r\n            }\r\n        }\r\n        else if (rotated) {\r\n\r\n            if(row + ship.getLength() > 10) {\r\n                throw new Error('ship is out of bounds');\r\n            }\r\n\r\n            for (let i=row; i<(row + ship.getLength()); i++) {\r\n                if(board[i][column].ship !== null) {\r\n                    throw new Error('Cannot overlap ships.');\r\n                }\r\n            }\r\n\r\n            for (let i=row; i<(row + ship.getLength()); i++) {\r\n                if(board[i][column].ship !== null && board[i][column].mock){\r\n                    board[i][column].mock = false;\r\n                    board[i][column].ship = null;\r\n                }\r\n                board[i][column].ship = ship;\r\n                board[i][column].shipPosition = position;\r\n                ship.isPlaced = true;\r\n                position++;\r\n            }\r\n        }\r\n        this.setState({\r\n            gameboard: board,\r\n        })\r\n        this.setState((currentState) => {\r\n            return {\r\n            ships: currentState.ships.filter((currShip) => ship !== currShip),\r\n            placedShips: currentState.placedShips.concat([ship]),\r\n            mockShips: currentState.mockShips.filter((currShip) => ship !== currShip)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleAttack(row, col){\r\n        //if the game is over do nothing on click,\r\n        // if it's the players turn then they shouldn't be able to click on their own gameboard\r\n\r\n        if(!this.props.gameStarted){\r\n            return;\r\n        }\r\n\r\n        if(this.props.gameOver){\r\n            return;\r\n        }\r\n        let board = this.state.gameboard.slice();\r\n        if(board[row][col].attacked){\r\n            return;\r\n        }\r\n        if(board[row][col].attacked === false) {\r\n            if(board[row][col].ship !== null){\r\n                board[row][col].ship.hitShip(board[row][col].shipPosition);\r\n                this.checkAllShipsSunk();\r\n            }\r\n            board[row][col].attacked = true;\r\n    }\r\n        this.setState({gameboard: board});\r\n        this.props.changeTurn();\r\n    }\r\n\r\n    checkAllShipsSunk() {\r\n        const allSunk = this.state.placedShips.every((ship) => ship.isSunk());\r\n        if(allSunk){\r\n            this.props.endGame();\r\n        }\r\n        this.setState({\r\n            gameover: allSunk,\r\n            loser: allSunk\r\n        });\r\n    }\r\n\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    changeTurn() {\r\n        this.setState({\r\n            turn: !this.state.turn,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='container'>\r\n                <div id='player-container'>\r\n                    {this.state.turn ? <div>Turn</div> : null}\r\n                </div>\r\n\r\n                <div id='board-container'>\r\n                    <div id='gameboard-container' \r\n                    style={\r\n                        {'border': this.props.gameOver && this.state.loser ? '4px solid red' \r\n                        : this.props.gameOver && !this.state.loser ? '4px solid forestgreen' \r\n                        : null}\r\n                    }>\r\n                    {this.state.gameboard.map((row, i) => \r\n                        <div key={i} className='row'>\r\n                            {row.map((ship, j) => (\r\n                                <Cell \r\n                                key={i + j} \r\n                                className='cell'\r\n                                attacked={ship.attacked}\r\n                                ship={ship.ship}\r\n                                mock={ship.mock}        \r\n                                shipPosition={ship.shipPosition}\r\n                                user = {this.props.user}          \r\n                                onclick={() => this.handleAttack(i, j)}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nclass Cell extends Component {\r\n    render () {\r\n        //if miss\r\n        if(this.props.attacked && !this.props.ship){\r\n            return (\r\n                <div className='missed cell'></div>\r\n            )\r\n        }\r\n        //if hit\r\n        else if(this.props.attacked && this.props.ship){\r\n            return (\r\n                <div className='hit cell'></div>\r\n            )\r\n        }\r\n        else if(this.props.ship){\r\n            if(this.props.user) {\r\n                if(this.props.mock){\r\n                    return (\r\n                        <div className = 'mock cell'></div>\r\n                    )\r\n                }\r\n            return (\r\n                <div className ='ship cell'></div>\r\n            )\r\n            }\r\n            else{\r\n                return (\r\n                    <div onClick={this.props.user ? null: this.props.onclick} className ='cell'></div>\r\n                )\r\n            }\r\n        }\r\n        return (\r\n            <div onClick={this.props.user ? null: this.props.onclick} className='cell'></div>\r\n        )\r\n    }\r\n\r\n    //attacked, ship, shipPosition\r\n}\r\n\r\n/*TODO: add placeShip functionality check\r\nadd startGame check\r\n\r\n\r\nadd resetGame, startNewGame\r\nwhen placing ships, highlight where they're about to be placed in grey check\r\n\r\n*/","// then player can drag and drop pieces into their own board\r\n// then player clicks play and game begins\r\n// player goes first, click on cpu gameboard, cpu gameboard handles attack, checks if all ships sunk\r\n// cpu goes\r\n// alternates until allShipsSunk is true for a gameboard\r\n// when true, winner is displayed, option to play again is shown, if selected everything resets\r\n\r\nimport Player from './Player';\r\nimport React, { Component } from 'react';\r\nimport './Game.css';\r\n\r\nexport default class Game extends Component {\r\n    constructor(props) {\r\n        // props passed in are two gameboards, one for user, one for CPU\r\n        super(props);\r\n\r\n        this.state = {\r\n            turn: true,\r\n            gameStarted: false,\r\n            input: '',\r\n            addedShipCoordinates: [],\r\n            buttonValue: 'Add ship',\r\n            gameOver: false,\r\n            gameReadyToStart: false,\r\n            vertical: false,\r\n        }\r\n\r\n        this.updateInput = this.updateInput.bind(this);\r\n        this.handleInput = this.handleInput.bind(this);\r\n    }\r\n\r\n    toggleOrientation() {\r\n        this.setState((currentState) => {\r\n            return {\r\n                vertical: !currentState.vertical\r\n            }\r\n        })\r\n    }\r\n\r\n    startGame() {\r\n        this.setState({\r\n            gameStarted: true,\r\n        })\r\n    }\r\n\r\n    endGame() {\r\n        this.setState({\r\n            gameOver: true,\r\n            gameStarted: false,\r\n            newGameStarted: false,\r\n        })\r\n    }\r\n\r\n    changeTurn() {\r\n        this.setState({\r\n            turn: !this.state.turn\r\n        })\r\n    }\r\n\r\n    handleInput(e){\r\n        console.log('butt');\r\n        e.preventDefault();\r\n        e.stopPropagation()\r\n        if(this.state.input !== '' && this.state.input.length === 2){\r\n            this.setState((currentState) => {\r\n                return {\r\n                addedShipCoordinates: currentState.addedShipCoordinates.concat([[this.state.input[0], Number(this.state.input[1])]]),\r\n                input: '',\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    updateInput (e) {\r\n        const value = e.target.value;\r\n        this.setState({\r\n            input: value,\r\n        })\r\n    }\r\n\r\n    changeButtonValue(newValue) {\r\n        this.setState({\r\n            buttonValue: newValue,\r\n        })\r\n    }\r\n\r\n    readyToStartGame() {\r\n        this.setState({\r\n            gameReadyToStart: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id='main-container'>\r\n                <GameOver \r\n                isGameOver={this.state.gameOver}\r\n                />\r\n                <div id='title'>\r\n                    <h1>Battleship</h1>\r\n                </div>\r\n                {this.state.gameOver ? \r\n                <form>\r\n                    <div id='btn-container'>\r\n                        <input className='start btn' type='submit' value='Restart'/>\r\n                    </div>\r\n                </form>\r\n                : null}\r\n                {!this.state.gameStarted && this.state.gameReadyToStart && !this.state.gameOver ? \r\n                <div id='btn-container'>\r\n                    <button onClick={() => this.startGame()} className='start btn'>Start Game</button>\r\n                </div>    \r\n                :\r\n                null\r\n                }\r\n\r\n\r\n\r\n                <div id='gameboards'>\r\n                    <div id='user'>\r\n                    <Player \r\n                    user={true}\r\n                    turn={this.state.turn}\r\n                    changeTurn={() => this.changeTurn()}\r\n                    gameStarted={this.state.gameStarted}\r\n                    input={this.state.input}\r\n                    shipCoords={this.state.addedShipCoordinates}\r\n                    startGame={() => this.startGame()}\r\n                    gameOver={this.state.gameOver}\r\n                    endGame={() => this.endGame()}\r\n                    ready={() => this.readyToStartGame()}\r\n                    vertical={this.state.vertical}\r\n                    />\r\n                    {!this.state.gameReadyToStart ? \r\n                    <div id='user-place-ship-form'>\r\n                        <form onSubmit={this.handleInput} id='form'>\r\n                            <div id='instruction'>Input coordinate e.g. 'A5'</div>\r\n                            <div id='input-container'>\r\n                                <input \r\n                                id='coordinates'\r\n                                type='text' \r\n                                value={this.state.input} \r\n                                onChange={this.updateInput}\r\n                                maxLength={2}\r\n                                />\r\n                            </div>\r\n                            <input type='button' onClick={() => this.toggleOrientation()} \r\n                            value={this.state.vertical ? 'Make Horizontal': 'Make Vertical'}\r\n                            className='orientation btn'\r\n                            ></input>\r\n                            <input type='submit' value={this.state.buttonValue} className='placeShip btn'></input>\r\n                        </form>\r\n                    </div> \r\n                    :\r\n                    null\r\n                    }\r\n                    </div>\r\n                    <Player \r\n                    user={false}\r\n                    turn={!this.state.turn}\r\n                    changeTurn={() => this.changeTurn()}\r\n                    gameStarted={this.state.gameStarted}\r\n                    gameOver={this.state.gameOver}\r\n                    endGame={() => this.endGame()}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass GameOver extends Component {\r\n    render() {\r\n        if (this.props.isGameOver){\r\n        return (\r\n            <div id='game-over'>\r\n                <h1>Game Over</h1>\r\n            </div>\r\n        )\r\n        }\r\n        else{\r\n            return null\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\nimport Player from './Player';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div>\n        <Game\n        playerOne={new Player({})}\n        playerTwo={new Player({})}\n        />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}